'use strict';

var fs = require('fs');
var path = require('path');

/**
 * Normal file system
 */
var LocalFS = require('./vfs').inherits(function() {
    this.options.cwd = this.options.cwd || '.';
    // realpath
    this.options.cwd = path.resolve(this.options.cwd);
    this.options.mode = this.options.mode || (511 & (~process.umask()));
});

LocalFS.prototype.rename = function(oldPath, newPath, cb) {
    if (!cb) {
        return this.promise(this.rename, oldPath, newPath);
    }

    oldPath = this.resolve(oldPath);
    newPath = this.resolve(newPath);

    fs.rename(oldPath, newPath, cb);
};

LocalFS.prototype.stat = function(p, cb) {
    if (!cb) {
        return this.promise(this.stat, p);
    }

    p = this.resolve(p);
    fs.stat(p, cb);
};

LocalFS.prototype.unlink = function(p, cb) {
    if (!cb) {
        return this.promise(this.unlink, p);
    }

    p = this.resolve(p);
    fs.unlink(p, cb);
};

LocalFS.prototype.rmdir = function(p, cb) {
    if (!cb) {
        return this.promise(this.rmdir, p);
    }

    p = this.resolve(p);
    fs.rmdir(p, cb);
};

LocalFS.prototype.mkdir = function(p, mode, cb) {
    if (typeof mode === 'function') {
        cb = mode;
        mode = undefined;
    }

    if (!cb) {
        return this.promise(this.mkdir, p, mode);
    }

    p = this.resolve(p);
    fs.mkdir(p, mode, cb);
};


LocalFS.prototype.readdir = function(p, cb) {
    if (!cb) {
        return this.promise(this.readdir, p);
    }

    p = this.resolve(p);
    fs.readdir(p, cb);
};

LocalFS.prototype.readFile = function(filename, options, cb) {
    if (typeof options === 'function') {
        cb = options;
        options = undefined;
    }

    if (!cb) {
        return this.promise(this.readFile, options, filename);
    }

    filename = this.resolve(filename);
    fs.readFile(filename, options, cb);
};

LocalFS.prototype.writeFile = function(filename, data, options, cb) {
    if (typeof options === 'function') {
        cb = options;
        options = undefined;
    }

    if (!cb) {
        return this.promise(this.writeFile, filename, data, options);
    }

    filename = this.resolve(filename);
    fs.writeFile(filename, data, options, cb);
};

module.exports = LocalFS;